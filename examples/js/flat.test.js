const { flat_1, flat_2, flat_3, flat_4, flat_5, flat_6 } = require('./flat')

test('数组扁平化：函数外部变量', () => {
	expect(flat_1([1, [2, 3], [4, 5, [6, 7, 8, [9, [10]]]]])).toStrictEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
})

test('数组扁平化：函数参数变量', () => {
	expect(flat_2([1, [2, 3], [4, 5, [6, 7, 8, [9, [10]]]]])).toStrictEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
})

test('数组扁平化：函数内部变量', () => {
	expect(flat_3([1, [2, 3], [4, 5, [6, 7, 8, [9, [10]]]]])).toStrictEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
})

test('数组扁平化：IIFE', () => {
	expect(flat_4([1, [2, 3], [4, 5, [6, 7, 8, [9, [10]]]]])).toStrictEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
})

test('数组扁平化：reduce', () => {
	expect(flat_5([1, [2, 3], [4, 5, [6, 7, 8, [9, [10]]]]])).toStrictEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
})

test('数组扁平化：concat', () => {
	expect(flat_6([1, [2, 3], [4, 5, [6, 7, 8, [9, [10]]]]])).toStrictEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
})