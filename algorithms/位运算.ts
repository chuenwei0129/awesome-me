// 还有>>1等于除以2不取余，这个东西有时挺管用的
// 5. 使用按位|构造属性集
// 现在有个后台管理系统，操作权限分为一级、二级、三级管理员，其中一级管理员拥有最高的权限，二、三级较低，有些操作只允许一、二级管理员操作，有些操作只允许一、三级管理员操作。现在已经登陆的某权限的用户要进行某个操作，要用怎样的数据结构能很方便地判断他能不能进行这个操作呢？我们用位来表示管理权限，一级用第3位，二级用第2位，三级用第1位，即一级的权限表示为0b100 = 4，二级权限表示为0b010 = 2，三级权限表示为0b001 = 1。如果A操作只能由一级和二级操作，那么这个权限值表示为6 = 0b110，它和一级权限与一下：6 & 4 = 0b110 & 0b100 = 4，得到的值不为0，所以认为有权限，同理和二级权限与一下6 & 2 = 2也不为0，而与三级权限与一下6 & 1 = 0，所以三级没有权限。这里标志位的1表示打开，0表示关闭。这样的好处在于，我们可以用一个数字，而不是一个数组来表示某个操作的权限集，同时在进行权限判断的时候也很方便。
// 3. 使用按位与&去掉高位
// 1. 使用按位非~判断索引存在
// 比如需要注意到位运算隐含了 int32 转型
// 『 | 0 』来标识 int32

// 位运算的综合应用
// 这里有个例子——不使用加减乘除来做加法，经常用来考察对位运算的掌握情况。读者可以先自行尝试分析和实现。

function addByBit(a, b) {
  if (b === 0) {
    return a
  }
  // 不用进位的相加
  let c = a ^ b
  // 记录需要进位的
  let d = a & b
  d = d << 1
  // 继续相加，直到d进位为0
  return addByBit(c, d)
}

let ans = addByBit(5, 8)
console.log(ans)
